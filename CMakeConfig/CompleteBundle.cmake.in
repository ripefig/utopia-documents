###############################################################################
#   
#    This file is part of the Utopia Documents application.
#        Copyright (c) 2008-2017 Lost Island Labs
#            <info@utopiadocs.com>
#    
#    Utopia Documents is free software: you can redistribute it and/or modify
#    it under the terms of the GNU GENERAL PUBLIC LICENSE VERSION 3 as
#    published by the Free Software Foundation.
#    
#    Utopia Documents is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
#    Public License for more details.
#    
#    In addition, as a special exception, the copyright holders give
#    permission to link the code of portions of this program with the OpenSSL
#    library under certain conditions as described in each individual source
#    file, and distribute linked combinations including the two.
#    
#    You must obey the GNU General Public License in all respects for all of
#    the code used other than OpenSSL. If you modify file(s) with this
#    exception, you may extend this exception to your version of the file(s),
#    but you are not obligated to do so. If you do not wish to do so, delete
#    this exception statement from your version.
#    
#    You should have received a copy of the GNU General Public License
#    along with Utopia Documents. If not, see <http://www.gnu.org/licenses/>
#   
###############################################################################

# Need this for link line stuff?
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0009 NEW)
  cmake_policy(SET CMP0011 NEW)
endif(COMMAND cmake_policy)

# Run the BundleUtilities cmake code
include(BundleUtilities)

set(UTOPIA_SUPPORT_LIBRARY_FILE "@CMAKE_BINARY_DIR@/InstalledSupportLibraries.txt")
file(WRITE ${UTOPIA_SUPPORT_LIBRARY_FILE} "")




# copy_resolved_item_into_bundle
#
# Copy a resolved item into the bundle if necessary. Copy is not necessary if the resolved_item
# is the same as the resolved_embedded_item.
#
function(copy_resolved_item_into_bundle resolved_item resolved_embedded_item)

  if(NOT "${resolved_item}" STREQUAL "${resolved_embedded_item}")
    execute_process(COMMAND ${CMAKE_COMMAND} -E copy "${resolved_item}" "${resolved_embedded_item}")
    # Install external dependencies into support library cache
    file(APPEND ${UTOPIA_SUPPORT_LIBRARY_FILE} "${resolved_embedded_item};")
  endif()

endfunction(copy_resolved_item_into_bundle)

# gp_item_default_embedded_path item default_embedded_path_var
#
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# Override on a per-project basis by providing a project-specific
# gp_item_default_embedded_path_override function.
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)
  #
  # The assumption here is that all executables in the bundle will be
  # in same-level-directories inside the bundle. The parent directory
  # of an executable inside the bundle should be MacOS or a sibling of
  # MacOS and all embedded paths returned from here will begin with
  # "@loader_path/../" and will work from all executables in all
  # such same-level-directories inside the bundle.
  #

  # By default, embed things right next to the main bundle executable:
  #
  set (install_name_prefix "@executable_path")

  # -------------------------------------------------------------------
  # If your application uses plugins then you should consider using the following
  #  instead but will limit your deployment to OS X 10.4. There is also a patch
  #  needed for CMake that as of Sept 30, 2008 has NOT been applied to CMake.
  #  set (install_name_prefix "@loader_path")

  if(WIN32)
    set(path "@BIN_INSTALL_DIR@")
  else(APPLE)
    set(path "${install_name_prefix}/../Libraries")
  endif()

  set(overridden 0)

  # Get path relative to bundle contents
  set(relative_item)
  if(WIN32)
    set(root_path "${CMAKE_BINARY_DIR}/")
  else(APPLE)
    set(root_path "${CMAKE_BINARY_DIR}/@BUNDLE_CONTENTS_DIR@/")
  endif()
  string(LENGTH ${root_path} root_path_length)
  string(LENGTH ${item} item_length)
  if(item_length GREATER root_path_length)
    string(SUBSTRING ${item} 0 ${root_path_length} item_root)
    if(item_root STREQUAL root_path)
      math(EXPR suffix_length "${item_length}-${root_path_length}")
      string(SUBSTRING ${item} ${root_path_length} ${suffix_length} item_suffix)
      string(REGEX REPLACE "/[^/]*$" "" item_suffix ${item_suffix})
      if(WIN32)
        set(path "${CMAKE_BINARY_DIR}/${item_suffix}")
      else()
        set(path "${install_name_prefix}/../${item_suffix}")
      endif()
      set(overridden 1)
    endif()
  endif()

  # Embed frameworks in the embedded "Frameworks" directory (sibling of MacOS):
  if(NOT overridden)
    if(item MATCHES "[^/]+\\.framework/")
      set(path "${install_name_prefix}/../Frameworks")
      set(overridden 1)
    endif(item MATCHES "[^/]+\\.framework/")
  endif(NOT overridden)

  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)

endfunction(gp_item_default_embedded_path_override)


# Compile list of application executables
if(WIN32)
  file(GLOB APPS "@BIN_INSTALL_DIR@/Documents.exe")
elseif(APPLE)
  file(GLOB APPS "@BIN_INSTALL_DIR@/Documents")
endif()

# Compile list of dynamically loaded plugins
file(GLOB_RECURSE PLUGINS "@CMAKE_BINARY_DIR@/@PLUGIN_INSTALL_DIR@/*.dylib"
                          "@CMAKE_BINARY_DIR@/@PLUGIN_INSTALL_DIR@/*.so"
                          "@CMAKE_BINARY_DIR@/@PLUGIN_INSTALL_DIR@/*.dll")
						  
# Compile list of python shared objects
file(GLOB_RECURSE PYTHON_SHARED_OBJECTS "@PYTHON_INSTALL_DIR@/*.so"
                                        "@PYTHON_INSTALL_DIR@/*.pyd")

# Compile list of dependency directories
set(DIRS "@UTOPIA_DEPENDENCIES_DIR@/lib;@UTOPIA_DEPENDENCIES_DIR@/bin")

# Fix up bundle
fixup_bundle("${APPS}" "${PLUGINS};${PYTHON_SHARED_OBJECTS}" "${DIRS}")

# Copy support libraries for install later
file(READ ${UTOPIA_SUPPORT_LIBRARY_FILE} SUPPORT_LIBS)
foreach(LIB ${SUPPORT_LIBS})
  execute_process(COMMAND ${CMAKE_COMMAND} -E copy "${LIB}" "@CMAKE_BINARY_DIR@/@UTOPIA_SUPPORT_LIBRARY_DIR@/")
endforeach()

#execute_process(COMMAND @OSX_SET_PERMISSIONS_SCRIPT@)
